VARIABLES
(?repeat -> 5) 
((§-walk-through ?level) -> (1 2 3 4 5 6))
(?intervals -> '(
	    (1 (10 100))
	    (2 (100 1000))
	    (3 (100 1000))
	    (4 (100 10000))
	    (5 (100 1000))
	    (6 (100 10000))))
GRAMMAR
(exercise -> (Compléter les phrases avec le chiffre ou le nombre  adéquat ?point newline enumerate))
(enumerate -> (§-* (length-walk '?level) ?each-level)) 
(?each-level -> ((§-> ?level) (§-* ?repeat ?item)))
(?item -> (?init Dans ?n le ?chiffre-nombre ?de-des ?unite-ordre est  ?box ?point newline))
(?init -> ((§-reinit) (§-%< ch-nmb (ch-nmb ?level)) (§-%< u-o (u-o ?level))))
(?n -> (§-e (random-from-level ?level ?intervals)))
(?chiffre-nombre -> (§-% ch-nmb "chiffre" "nombre"))
(?de-des -> (§-% ch-nmb des ?de))
(?de -> (§-% u-o ("d'" nospace) de de de))
(?unite-ordre -> (§-% u-o unités dizaines centaines milliers))
(?point -> (nospace "."))
(?box -> "___")
CODE
(defun random-interval (interval)
       (+ (first interval) (random (apply #'- (reverse interval)))))
(defun random-from-level (level alist)
       (random-interval (second (assoc level alist))))
(defun ch-nmb (level)
       (case level ((1 2) 0) 
       	     	   ((3 4) 1) 
		   (otherwise nil)))
(defun u-o (level)
       (case level (1 (random 2))
       	     	   ((3 5) (random-interval '(1 3)))
       	     	   (otherwise nil)))
